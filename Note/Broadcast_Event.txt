1 ANR application not response
    更新CPU的使用信息updateCpuStatsNow()方法和打印函数栈dumpStackTraces()方法，是系统报告ANR问题关键
    
    1 service :执行时间超过20s 会产生anr
        前台进程中Service生命周期不能超过20秒，后台进程中Service的生命周期不能超过200秒在启动Service时，
        抛出定时消息SERVICE_TIMEOUT_MSG或SERVICE_BACKGOURND_TIMEOUT_MSG，如果定时消息响应了，则说明发生了ANR
    
    2     broadcast:
    广播：(Intent) & 发送
        在AMS中有两个广播队列：BroadcastQueue一个前台的(mFgBroadcastQueue)，一个后台(mBgBroadcastQueue)。
            前台广播处理比较快，超时响应10秒，而后台广播超时响应是60秒。
        每个BroadcastQueue中存在两个ArrayList，一个并发(mParallelBroadcasts)，一个顺序的(mOrderedBroadcasts)。队列中保存的都是 BroadcastRecord。
            一个广播 (Intent) 注册的所有 receiver 集合组成一个广播 BroadcastRecord。静态注册的(Manifest.xml 注册)放在顺序队列(mOrderedBroadcases)中，动态注册的放在并发队列。
        如果这个intent本身是ordered的（发广播的地方用的sendOrderedBroadcast），它的所有receiver组成一个BroadcastRecord放到该BroadcastQueue的顺序队列。
            至于这个BroadcastQueue是前台Queue还是后台Queue，怎取决于intent是否有FLAG_RECEIVER_FOREGROUND属性。
        
        有序广播调用过程：
        ActivityManagerService::javabroadcastIntentLocked()
        └── enqueueOrderedBroadcastLocked()
            └──    scheduleBroadcastsLocked()
                └── BroadcasrQueue::enqueueMessage()
                    └── MessageQueue::processNextBroadcast()
                        └── BraodcasrQueue::processCurBroadcastLocked()
                            └── scheduleReceiver()  
                                ```// 调用应用程序主线程内部()处理 Broadcast
                                └── APP:finishReceiver()
                                    └── AMS:finishReceiverLocked()
                                        └── BroadcasrQueue::processNextBroadcast() // 处理下一条
        
        
        分析：
            调用processNextBroadcast来处理这些BroadcastRecord，在这个函数中先循环把并发队列中的BroadcastRecord全部处理掉，
            针对一个BroadcastRecord中的每个receiver都会通过binder调用该receiver所在应用主线程的scheduleRegisteredReceiver函数来处理，这个函数是异步函数，
            调用后马上返回而不需要等函数执行完成。每次processNextBroadcast时都会把并发队列mParallelBroadcasts中的所有BroadcastRecord全都处理掉，
            就是说每个队列中的receiver都会接收到自己要接收的intent，receiver之间互不影响。
            
            接下来就是处理顺序队列mOrderedBroadcasts中的BroadcastRecord，针对mOrderedBroadcasts的每一个BroadcastRecord都会依次处理，处理完一个再处理另一个，
            针对一个BroadcastRecord的每一个receiver也是依次处理，处理完一个再处理另一个，也就是说每次执行processNextBroadcast最多处理一个BroadcastRecord
            中的一个receiver。如果此receiver所在的进程此时还没启动，还会先去启动该进程，进程启动起来以后在去处理。
            该recevier的应用进程处理完后会通过finishReceiverLocked回调回来，告诉ams去处理下一个receiver。前面的图说的就是这个流程，只是省略了进程启动流程。

    广播处理：
        “静态”接收器是ResolveInfo，需要通过PackageManager获取包信息，进行权限检查。权限检查的内容非常庞大
        经过一系列复杂的权限检查后，终于可以向目标接收器派发了。通过AMS.getProcessRecordLocked()获取广播接收器的进程信息
        如果app.thread ！= null，则进程已经启动，就可以调用BroadcastQueue.processCurBroadcastLocked()进行接下来的派发处理了
        如果进程还没有启动，则需要通过AMS.startProcessLocked()来启动进程，当前消息并未派发，调用BroadcastQueue.scheduleBroadcastsLocked()进入下一次的调度
        如果进程启动失败了，则当前消息记录成mPendingBroadcast，即阻塞的广播消息，等待下一次调度时处理
            foreground queue: 前台10s
            background queue: 后台60s
                AMS会调用BroadcastQueue.scheduleBroadcastsLocked()
                handleMessage():
                    BroadcastQueue.processNextBroadcast()方法
                        parallelbroadcast: 不会anr
                        orderedbroadcase: 可能会anr
                        
                        setBroadcastTimeoutLocked(timeoutTime);
                            通过设置一个定时消息BROADCAST_TIMEOUT_MSG来跟踪当前广播消息的执行情况，这种超时监测机制跟Service ANR很类似，也是抛到AMS线程的消息队列。 如果所有的接收器都处理完毕了，则会调用cancelBroadcastTimeoutLocked()清除该消息;否则，该消息就会响应，并调用broadcastTimeoutLocked()， 这个方法在第一种ANR监测机制的时候调用过，第二种ANR监测机制也会调用，我们留到后文分析。
                    
    
    3 input处理超时
        input事件是通过读取物理设备，封装成event,再进行dispatch的，app和inputDispatcher之间通过Pipe进行连接，每个窗口和inputDispatcher之间都有一个inputChannel，在register inputChannel
            的时候，也会注册回调函数handleReceiveCallback，这样当event执行完成的时候会调用回调，返回findshed。inputDispatcher可以继续处理下一条 event .
        发送消息逻辑
        InputDispatcherThread::threadLoop()
        └── InputDispatcher::dispatchOnce()
            └── InputDispatcher::dispatchOnceInnerLocked()
                └── InputDispatcher::dispatchKeyLocked()
                    └── InputDispatcher::dispatchEventLocked()
                        └── InputDispatcher::prepareDispatchCycleLocked()
                            └── InputDispatcher::enqueueDispatchEntriesLocked()
                                └── InputDispatcher::startDispatchCycleLocked()
                                    └── InputPublisher::publishKeyEvent()
        接收消息之后回调
        InputDispatcher::finishDispatchCycleLocked()
        └── InputDispatcher::onDispatchCycleFinishedLocked()
            └── InputDispatcher::doDispatchCycleFinishedLockedInterruptible()
                └── InputDispatcher::startDispatchCycleLocked()
        
    场景1: 窗口处于paused状态，不能处理输入事件
        “Waiting because the [targetType] window is paused.”

    场景2: 窗口还未向InputDispatcher注册，无法将事件派发到窗口
        “Waiting because the [targetType] window’s input channel is not registered with the input dispatcher. The window may be in the process of being removed.”

    场景3: 窗口和InputDispatcher的连接已经中断，即InputChannel不能正常工作
        “Waiting because the [targetType] window’s input connection is [status]. The window may be in the process of being removed.”

    场景4: InputChannel已经饱和，不能再处理新的事件
        “Waiting because the [targetType] window’s input channel is full. Outbound queue length: %d. Wait queue length: %d.”

    场景5: 对于按键类型(KeyEvent)的输入事件，需要等待上一个事件处理完毕
        “Waiting to send key event because the [targetType] window has not finished processing all of the input events that were previously delivered to it. Outbound queue length: %d. Wait queue length: %d.”

    场景6: 对于触摸类型(TouchEvent)的输入事件，可以立即派发到当前的窗口，因为TouchEvent都是发生在用户当前可见的窗口。但有一种情况，     如果当前应用由于队列有太多的输入事件等待派发，导致发生了ANR，那TouchEvent事件就需要排队等待派发。
        “Waiting to send non-key event because the %s window has not finished processing certain input events that were delivered to it over %0.1fms ago. Wait queue length: %d. Wait queue head age: %0.1fms.”
    
    出现上述任意一种情况，调用：
    handleTargetsNotReadyLocked(); // 需要等待，调用该函数
    onANRLocked
        NativeInputManager::notifyANR()    
            InputManagerService.notifyANR(); //java 层
                InputManagerService.notifyANR()
                └── InputMonitor.notifyANR()
                    ├── IApplicationToken.keyDispatchingTimedOut()
                    │   └── ActivityRecord.keyDispatchingTimedOut()
                    │       └── AMS.inputDispatchingTimedOut()
                    │           └── AMS.appNotResponding()
                    │
                    └── AMS.inputDispatchingTimedOut()
                        └── AMS.appNotResponding() // 超时，响应anr


                            
2 Fatal  :forceclose 或者其他异常退出信息


kernel log 获取方法
    开机？ 否：连接串口导入log
           是：oppo_log :kernel/kinfo.txt
                导出并解析dump 关注：dmesg.txt task.txt 
    导出解析dump的工具
        1.导出dump：QPST(下载地址： \\192.168.14.186\Software_Domain_Doc\1.Tools\5.Qualcomm工具\QPST)
        2.自动化解析： ramparser(git clone git://codeaurora.org/quic/la/platform/vendor/qcom-opensource/tools)
            Ramparse工具:
            从https://cloudfile.myoas.com/l/Y0TM4T下载ramparse.rar，解压缩到本地目录，比如D:\t32tools\ramparse
            Trace32安装路径:
            \\172.17.121.86\Software_Domain_Doc\1.Tools\7.开发工具\Trace32\TRACE32_201308 (H)\setup.bat
            (遇到第一个选择，请选software only XXXXX 遇到cpu selection时，勾上arm arm64)
            用\\172.17.121.86\Software_Domain_Doc\1.Tools\7.开发工具\Trace32\t32update下文件，替换T32安装目录下相应文件
        3将dump和对应版本的vmlinux,这个平台的ramparse解析脚本拷贝到一个文件夹下
            执行ramparse解析脚本,成功后会生成result文件夹



打印函数调用堆栈log方法
    Log.i("zjp",Log.getStackTraceString(new Throwable()));
    if (DEBUG_ADD_REMOVE) Slog.i(TAG_ADD_REMOVE, 3514 "Removing activity " + p + " from task=" + task + " adding to task=" 3515 + targetTask + " Callers=" + Debug.getCallers(4)); 

Service：
    service 声明周期管理
        启动式：startService-> onCreate()-> onStartCommand()-> 服务运行-> 服务自己/客户端停止(stopSelf/stopService)-> onDestroy()-> 停止
        绑定式：bindService-> onCreate()->  onBind()-> 服务运行-> 所有客户端和服务解绑(unbindService) -> onUnbind()-> onDestroy()-> 停止
广播：
    设置intent.FLAG_RECEIVER_REGISTERED_ONLY的广播，必须动态注册广播接收器才能接收。防止流氓软件利用系统高频广播实现自启动。

tag可能使用的部分场景：
    am_low_memory：位于AMS.killAllBackgroundProcesses或者AMS.appDiedLocked，记录当前Lru进程队列长度。
    am_pss：位于AMS.recordPssSampleLocked(
    am_meminfo：位于AMS.dumpApplicationMemoryUsage
    am_proc_start:位于AMS.startProcessLocked，启动进程
    am_proc_bound:位于AMS.attachApplicationLocked
    am_kill: 位于ProcessRecord.kill，杀掉进程
    am_anr: 位于AMS.appNotResponding
    am_crash:位于AMS.handleApplicationCrashInner
    am_wtf:位于AMS.handleApplicationWtf
    am_activity_launch_time：位于ActivityRecord.reportLaunchTimeLocked()，后面两个参数分别是thisTime和 totalTime.
    am_activity_fully_drawn_time:位于ActivityRecord.reportFullyDrawnLocked, 后面两个参数分别是thisTime和 totalTime
    am_broadcast_discard_filter:位于BroadcastQueue.logBroadcastReceiverDiscardLocked
    am_broadcast_discard_app:位于BroadcastQueue.logBroadcastReceiverDiscardLocked
    Activity生命周期相关的方法:

    am_on_resume_called: 位于AT.performResumeActivity
    am_on_paused_called: 位于AT.performPauseActivity, performDestroyActivity
    am_resume_activity: 位于AS.resumeTopActivityInnerLocked
    am_pause_activity: 位于AS.startPausingLocked
    am_finish_activity: 位于AS.finishActivityLocked, removeHistoryRecordsForAppLocked
    am_destroy_activity: 位于AS.destroyActivityLocked
    am_focused_activity: 位于AMS.setFocusedActivityLocked, clearFocusedActivity
    am_restart_activity: 位于ASS.realStartActivityLocked
    am_create_activity: 位于ASS.startActivityUncheckedLocked
    am_new_intent: 位于ASS.startActivityUncheckedLocked
    am_task_to_front: 位于AS.moveTaskToFrontLocked
trace 中线程状态信息
    TERMINATED    ZOMBIE 线程死亡，终止运行
    RUNNABLE      RUNNING/RUNNABLE 线程可运行或正在运行
    TIMED_WAITING TIMED_WAIT 执行了带有超时参数的wait、sleep或join函数
    BLOCKED       MONITOR 线程阻塞，等待获取对象锁
    WAITING         WAIT 执行了无超时参数的wait函数
    NEW             INITIALIZING 新建，正在初始化，为其分配资源
    NEW         STARTING 新建，正在启动
    RUNNABLE     NATIVE 正在执行JNI本地函数
    WAITING     VMWAIT 正在等待VM资源
    RUNNABLE     SUSPENDED 线程暂停，通常是由于GC或debug被暂停
    UNKNOWN     未知状态