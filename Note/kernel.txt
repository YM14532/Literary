通常从系统上电执行的boot loader的代码，而要从boot loader跳转到linux kernel的第一条指令处执行需要一些特定的条件。关于对boot loader的分析请看我的另一篇文档u-boot源码分析。 
	这里讨论下进入到linux kernel时必须具备的一些条件,这一般是boot loader在跳转到kernel之前要完成的: 
	1. CPU必须处于SVC(supervisor)模式,并且IRQ和FIQ中断都是禁止的; 
	2. MMU(内存管理单元)必须是关闭的, 此时虚拟地址就是物理地址; 
	3. 数据cache(Data cache)必须是关闭的 
	4. 指令cache(Instruction cache)可以是打开的,也可以是关闭的,这个没有强制要求; 
	5. CPU 通用寄存器0 (r0)必须是 0; 
	6. CPU 通用寄存器1 (r1)必须是 ARM Linux machine type (关于machine type, 我们后面会有讲解) 
	7. CPU 通用寄存器2 (r2) 必须是 kernel parameter list 的物理地址(parameter list 是由boot loader传递给kernel,用来描述设备信息属性的列表)。 
arm linux boot的主线可以概括为以下几个步骤: 
	1. 确定 processor type 
	2. 确定 machine type 
	3.检查参数合法性 
	4. 创建页表 
	5. 调用平台特定的__cpu_flush函数 (在struct proc_info_list中) 
	6. 开启mmu 
	7. 切换数据 
	最终跳转到start_kernel (在__switch_data的结束的时候,调用了 b start_kernel)	

内核入口
	stext 
		/arch/arm/kernel/vmlinux.lds.S:  31 ENTRY(stext)
			这是ld script 文件， 表示程序的入口符号是stext, 核心代码如下：
				···
			64 b start_kernel //程序跳转到函数start_kernel进入c语言部分
	start_kernel
		smp_setup_processor_id()	// 多个cpu的时候，返回cpu号
		setup_arch()	//设置体系结构相关变量
		page_alloc_inti()	// 页表结构化
		smp_prepare_boot_cpu();
		setup_per_cpu_areas() 	// 为每个cpu分配pre_cpu结构内存，并复制.data.percpu段的数据
		    //使用"arch/alpha/kernel/entry.S"中的入口点设置系统自陷入口  
		trap_init();  
		//内存初始化  
		mm_init();  
		...  
		//时间,定时器初始化  
		time_init();  
		...  
		//控制台初始化  
		console_init();  
		...  
		/* Do the rest non-__init'ed, we're now alive */  
		rest_init();  // 开启内核线程
		kernel_init最开始只是一个函数，这个函数作为进程被启动，但是之后它将读取根文件系统下的init程序，这个操作将完成从内核态到用户态的转变，而这个init进程是所有用户态进程的父进程，它生了大量的子进程，所以init进程将永远存在，其PID是1
		kthreadd是内核守护进程，其PID为2
			kernel_thread(kernel_inti, NULL, CLONE_FS | CLONE_FILES)
***
			kernel_inti()
					kernel_inti_freeable()
						sys_open((const char __user *) "/dev/console", O_RDWR, 0)
							打开控制台设备
						sys_access((const char __user *) ramdisk_execute_command, 0) != 0)
							挂载根文件系统
							recovery 和 boot 挂载不同的文件系统
					try_to_run_init_process("/sbin/init")
					···
						寻找并，启动init程序
			pid = kernel_thread(kthreadd, NULL, CLONE_FS|CLONE_FILES)
				/kernel/msm-4.4/kernel/kthread.c
***
				kthreadd()  //创建内核线程
				for(;;)
					//如果发现kthread_list时一张空链表，则调用schedule调度函数。使当前进程进入睡眠
				    if (list_empty(&kthread_create_list))  
						schedule();  
					__set_current_state(TASK_RUNNING);  
				  
					spin_lock(&kthread_create_lock);  
					while (!list_empty(&kthread_create_list)) {  
						struct kthread_create_info *create;  
						  
						//会删除create对应的列表entry  
						create = list_entry(kthread_create_list.next,  
									struct kthread_create_info, list);  
						list_del_init(&create->list);  
						spin_unlock(&kthread_create_lock);  
				  
						//在create_kthread()函数中，会调用kernel_thread来生成一个新的进程，该进程的内核函数为kthread，调用参数为create，kernel_thread(kthread, create, CLONE_FS | CLONE_FILES | SIGCHLD);  
						//kthread将会使其所在的进程进入休眠状态，直到被别的进程唤醒。如果被唤醒，将会调用create->threadfn(create->data);  
						create_kthread(create);  			  
						spin_lock(&kthread_create_lock); 
			complete(&kthreadd_done);  
				//获取kthreadd的线程信息，获取完成说明kthreadd已经 创建成功。并通过一个complete变量（kthreadd_done）来通知kernel_init线程。  
				//为让系统运作起来，boot idle线程必须至少执行一次schedule()。  
			init_idle_bootup_task(current);//设置当前进程为idle（闲置）进程类。     
			schedule_preempt_disabled();//进程调度完成，回到这里，禁用抢占。 		
			cpu_idle();
				//在抢占禁用时调用cpu_idle,此时内核本体进入了idle状态，用循环消耗空闲的CPU时间片，该函数从不返回。
					在有其他进程需要工作的时候，该函数就会被抢占。
			